windows API
窗口管理函数：窗口创建、移动、修改
图形设备函数：图形绘制等
系统服务函数：实现与操作系统有关的一些功能

API(Application Programming Interface,应用程序接口)
SDK(Software Development Kit,软件开发工具包) 即直接使用API函数开发应用程序
MFC(Microsoft Foundation Classes,微软基础类库),以c++封装API后，再开发

typedef struct _WNDCLASS
{
...
WNDPROC lpfnWndProc;//指向窗口函数，该函数作事件消息处理
...
LPCTSTR lpszClassName;//本窗口类名，用于此后创建该类型的窗口CreateWindow参数之一
...
}WINCLASS

函数调用约定 __stdcall（固定参数，方便封装） __cdecl(默认C++，可变参数函数用)编译器转成时使用
能用__stdcall则用

窗口创建、显示
创建――   一个结构和4个API
	部件清单即结构WNDCLASS
	注册函数RegisterClass()//方便操作系统统一管理，RegisterClass(wc);结构对象名为结构首地址
	创建函数CreateWindow()//使用窗口句柄HWND hwnd=CreateWindow()，窗口大小在此定义。创建于内存中
	显示函数ShowWindow()
		UpdateWindow()
消息队列、消息循环
队列消息GetMessage()
非队列消息

Windows应用程序结构
主函数任务
	创建窗口、建立消息循环(由系统调用相应的窗口函数，窗口函数符合规范，系统自行调用)
窗口函数
	独立于主函数，接受处理系统传过来的消息，与主函数通过系统相联系。
	是完成应用程序用户任务的核心
	函数名与相应窗口中指针lpfnWndProc赋予的名称相同
	返回类型与系统要求相符
稳定代码-程序框架
可变代码-业务代码

低耦合-易维护，低执行效率
高耦合-难维护，高执行效率
当前程序大多高耦合，严重影响可维护性
原则：高内聚，低耦合--代码重构
函数或类的封装实现高内聚
指针或类似指针的索引实现低耦合，例如窗口函数指针

向窗口用户区输出图形必须在窗口函数WM_PAINT消息所对应的程序段中执行
WM_PAINT
	窗口在屏幕上首次显示
	窗口更新时
数组或者链表实现消息映射表，数组元素如下
struct MSGMAP_ENTRY
{
UINT nMessage;
void (* pfn)(HWND,UINT,WPARAM,LPARAM);

}

::域作用符

MFC中响应消息的类由CCmdTarget派生,其中封装窗口函数
	消息分类	标准消息，命令消息，通知消息
			系统函数，用户定义，按钮文本

CObject
	|-CCmdTarget
		|-CWnd 			CWnd 按钮、滚动条等的基类
			|-CFrameWnd 	其他子窗口的容器
		|-CWinThread		为了支持多线程
			|-CWinApp
				  
应用程序主窗口--|-窗口框架类mainframeWnd	边框相关,创建并管理视图类对象	前台
		|-视图类view			数据显示、用户消息响应及处理	前台
		|-文档类doc			数据存储、运算、管理		后台
		文档模板链接上述三部分

应用程序类-----	上述所有对象的容器和消息中心
		应用程序初始化，消息循环

文档/视图框架中，文档模板相当于早期MFC程序中的窗口对象

主要工作
	重写CWinApp派生类的虚函数InitInstance()。按照需求创建和显示窗口
	在CDocument派生类中，声明程序所需的数据和对这些数据进行必要操作的接口函数
	在CView派生类中编写处理消息的代码。处理中如果需要文档中的数据，则调用该类的成员函数GetDocument（）获取文档对象。
	在CView派生类的OnDraw（）函数中编写窗口重绘时的代码
	用宏实现类的消息映射表

应用程序各对象创建顺序
	应用程序对象是全局对象，由系统创建。
	应用程序启动后，程序主函数调用应用程序对象的初始化函数InitInstance（），并在其中创建文档模板对象。
	
联系
	框架窗口对象	基类成员函数GetActiveView()，GetActiveDocument()
	视图对象	基类成员函数GetDocument()，GetParentFrame()
			调用CDocument::UpdateAllViews()向与当前视图关联的文档发送一个消息
	文档对象	基类成员函数GetFirstViewPosition()
			调用CView::OnUpdate()更新视图对象显示

消息流动顺序
	活动的视图对象
		|-文档模板对象
		|	|-文档对象
		|
		|-框架窗口对象
			|-应用程序对象
				|-::DefWindowProc()

